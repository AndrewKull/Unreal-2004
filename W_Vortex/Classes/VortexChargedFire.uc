/*******************************************************************************
 * VortexChargedFire generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class VortexChargedFire extends ProjectileFire;

var() float MaxChargeTime;
var() Sound HoldSound;
var VortexWatcher VortexWatcher;

event ModeDoFire()
{
    // End:0x1F
    if(!Vortex(Weapon).AtVortexLimit())
    {
        super(WeaponFire).ModeDoFire();
    }
    //return;
}

function DrawMuzzleFlash(Canvas Canvas)
{
    // End:0x25
    if(FlashEmitter != none)
    {
        FlashEmitter.SetRotation(Weapon.Rotation);
    }
    super(WeaponFire).DrawMuzzleFlash(Canvas);
    //return;
}

function ModeHoldFire()
{
    // End:0x34
    if(Weapon.HasAmmo())
    {
        super(WeaponFire).ModeHoldFire();
        Weapon.PlaySound(HoldSound, SLOT_Interact, TransientSoundVolume,,,, false);
    }
    //return;
}

function float MaxRange()
{
    return 1500.0;
    //return;
}

function StopFiring()
{
    super(WeaponFire).StopFiring();
    Weapon.OutOfAmmo();
    //return;
}

simulated function PlayFiring()
{
    super(WeaponFire).PlayFiring();
    // End:0x25
    if(FireCount > 0)
    {
        Vortex(Weapon).HideDummyProj();
    }
    //return;
}

function Projectile SpawnProjectile(Vector Start, Rotator Dir)
{
    local VortexProj Vortex;
    local Vector X, Y, Z;
    local float pawnSpeed;

    // End:0x2A
    if(Bot(Instigator.Controller) != none)
    {
        Start.Z -= 20.0;
    }

        Vortex = Spawn(class'VortexProj', Instigator,, Start, Dir);

    // End:0x193
    if(Vortex != none)
    {
        Weapon.GetViewAxes(X, Y, Z);
        pawnSpeed = X Dot Instigator.Velocity;
        // End:0x109
        if(Bot(Instigator.Controller) != none)
        {
            Vortex.Speed = Vortex.MaxSpeed;
        }
        // End:0x149
        else
        {
            Vortex.Speed = Lerp(FMin(HoldTime / MaxChargeTime, 1.0), Vortex.MinSpeed, Vortex.MaxSpeed);
        }
        Vortex.Speed = pawnSpeed + Vortex.Speed;
        Vortex.Velocity = Vortex.Speed * vector(Dir);
    }
    return Vortex;
    //return;
}

function StartBerserk()
{
    //return;
}

function StopBerserk()
{
    //return;
}

defaultproperties
{
    MaxChargeTime=3.0
    HoldSound=Sound'ChaosEsounds1.Vortex.vortex_altfire'
    ProjSpawnOffset=(X=20.0,Y=9.0,Z=-6.0)
    bTossed=true
    bFireOnRelease=true
    FireEndAnim=None
    FireSound=Sound'ChaosEsounds1.Vortex.vortex_fire'
    FireForce="AssaultRifleAltFire"
    FireRate=1.50
    AmmoClass=class'VortexAmmo'
    AmmoPerFire=1
    ShakeRotMag=(X=100.0,Y=0.0,Z=0.0)
    ShakeRotRate=(X=1000.0,Y=0.0,Z=0.0)
    ShakeRotTime=2.0
    ShakeOffsetMag=(X=-4.0,Y=0.0,Z=-4.0)
    ShakeOffsetRate=(X=1000.0,Y=0.0,Z=1000.0)
    ShakeOffsetTime=2.0
    ProjectileClass=class'VortexProj'
    BotRefireRate=0.50
    WarnTargetPct=0.80
    aimerror=100.0
}

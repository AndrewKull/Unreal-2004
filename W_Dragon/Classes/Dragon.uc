/*******************************************************************************
 * DropShipKarma generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Dragon extends ONSChopperCraft
    config(User);

//#exec OBJ LOAD FILE=..\StaticMesh\W_Dropship-ST.usx

var() float MaxPitchSpeed;

var() vector DustOffset;
var() float DustTraceDistance;

var ONSAttackCraftExhaust RightEngine;
var ONSAttackCraftExhaust RightEngineB;
var ONSAttackCraftExhaust LeftEngine;
var ONSAttackCraftExhaust LeftEngineB;
var ONSAttackCraftExhaust RREngineA;
var ONSAttackCraftExhaust RREngineB;
var ONSAttackCraftExhaust LREngineA;
var ONSAttackCraftExhaust LREngineB;
var ONSAttackCraftExhaust LSideEngineA;
var ONSAttackCraftExhaust LSideEngineB;
var ONSAttackCraftExhaust LSideEngineC;
var ONSAttackCraftExhaust RSideEngineA;
var ONSAttackCraftExhaust RSideEngineB;
var ONSAttackCraftExhaust RSideEngineC;

var bool bHoverThrustersOn;

var() config bool bVehicleCarry;
var int TeamNum;
var Emitter MagEffect;
var Vector VehicleAttachOffset;
var() float VehicleAttachTraceDistance;

var ONSVehicle NewAttachVehicle;

var class<Emitter> RedBuildEffectClass;
var class<Emitter> BlueBuildEffectClass;


replication{

    reliable if(Role == ROLE_Authority)
        NewAttachVehicle;

}

function bool FastVehicle()
{
    return true;
}

function bool RecommendLongRangedAttack()
{
    return true;
}

/* --- START HUD --- */

simulated function SpecialCalcBehindView(PlayerController PC, out Actor ViewActor, out Vector CameraLocation, out Rotator CameraRotation)
{
    local Vector CamLookAt, HitLocation, HitNormal, OffsetVector;
    local Actor HitActor;
    local Vector X, Y, Z;

    if(DesiredTPCamDistance < TPCamDistance)
    {
        TPCamDistance = FMax(DesiredTPCamDistance, TPCamDistance - (CameraSpeed * (Level.TimeSeconds - LastCameraCalcTime)));
    } else {
        if(DesiredTPCamDistance > TPCamDistance)
        {
            TPCamDistance = FMin(DesiredTPCamDistance, TPCamDistance + (CameraSpeed * (Level.TimeSeconds - LastCameraCalcTime)));
        }
    }

    GetAxes(PC.Rotation, X, Y, Z);
    ViewActor = self;
    CamLookAt = ((GetCameraLocationStart()) + (TPCamLookat >> Rotation)) + TPCamWorldOffset;
    OffsetVector = vect(0.0, 0.0, 0.0);
    OffsetVector.X = -1.0 * TPCamDistance;
    CameraLocation = CamLookAt + (OffsetVector >> PC.Rotation);
    HitActor = Trace(HitLocation, HitNormal, CameraLocation, Location, true, vect(40.0, 40.0, 40.0));

    if((HitActor != none) && (HitActor.bWorldGeometry || HitActor == (GetVehicleBase())) || Trace(HitLocation, HitNormal, CameraLocation, Location, false, vect(40.0, 40.0, 40.0)) != none)
    {
        CameraLocation = HitLocation;
    }
    CameraRotation = Normalize(PC.Rotation + PC.ShakeRot);
    CameraLocation = ((CameraLocation + (PC.ShakeOffset.X * X)) + (PC.ShakeOffset.Y * Y)) + (PC.ShakeOffset.Z * Z);
}

/* --- START Destroy --- */


function Died(Controller Killer, class<DamageType> DamageType, Vector HitLocation)
{
    super(ONSVehicle).Died(Killer, DamageType, HitLocation);
}

simulated function Destroyed()
{

    if(LeftEngine != none)
    {
        LeftEngine.Destroy();
        LeftEngineB.Destroy();
        RightEngine.Destroy();
        RightEngineB.Destroy();
        LREngineA.Destroy();
        LREngineB.Destroy();
        RREngineA.Destroy();
        RREngineB.Destroy();
        LSideEngineA.Destroy();
        LSideEngineB.Destroy();
        LSideEngineC.Destroy();
        RSideEngineA.Destroy();
        RSideEngineB.Destroy();
        RSideEngineC.Destroy();
    }

    if(NewAttachVehicle != none)
    {
        EjectVehicle();
    }

    if(MagEffect != none)
    {
        MagEffect.Destroy();
    }

    super(ONSVehicle).Destroyed();
}

/* --- END Destroy --- */



simulated event DrivingStatusChanged()
{
	Super.DrivingStatusChanged();

    if (bDriving && Level.NetMode != NM_DedicatedServer && !bDropDetail)
	{

    }
    else
    {
        if (Level.NetMode != NM_DedicatedServer)
    	{
             UnSetTrailFX();
        }
    }
}


/* START Tick */

simulated function Tick(float DeltaTime)
{
    local float EnginePitch;
    local Vector RelVel;
    local bool bIsBehindView;
    local PlayerController PC;
    local float ThrustAmount;


    if(Level.NetMode != NM_DedicatedServer)
    {
        EnginePitch = 64.0 + ((VSize(Velocity) / MaxPitchSpeed) * 32.0);
        SoundPitch = byte(FClamp(EnginePitch, 64.0, 96.0));
        RelVel = Velocity << Rotation;
        PC = Level.GetLocalPlayerController();

        if((PC != none) && PC.ViewTarget == self){
            bIsBehindView = PC.bBehindView;
        } else {
            bIsBehindView = true;
        }
    }

    super(SVehicle).Tick(DeltaTime);

    if(RightEngine == none) SetTrailFX();

    	// Adjust Engine FX depending on being drive/velocity
		if (!bIsBehindView){

    		LeftEngine.SetThrustEnabled(false);
	        LeftEngineB.SetThrustEnabled(false);
    	    RightEngine.SetThrustEnabled(false);
        	RightEngineB.SetThrustEnabled(false);
	        LREngineA.SetThrustEnabled(false);
    	    LREngineB.SetThrustEnabled(false);
        	RREngineA.SetThrustEnabled(false);
	        RREngineB.SetThrustEnabled(false);

        } else {
			ThrustAmount = FClamp(OutputThrust, 0.0, 1.0);

    		LeftEngine.SetThrustEnabled(true);
	        LeftEngineB.SetThrustEnabled(true);
    	    RightEngine.SetThrustEnabled(true);
        	RightEngineB.SetThrustEnabled(true);
	        LREngineA.SetThrustEnabled(true);
    	    LREngineB.SetThrustEnabled(true);
        	RREngineA.SetThrustEnabled(true);
	        RREngineB.SetThrustEnabled(true);

    		LeftEngine.SetThrust(ThrustAmount);
	        LeftEngineB.SetThrust(ThrustAmount);
    	    RightEngine.SetThrust(ThrustAmount);
        	RightEngineB.SetThrust(ThrustAmount);
	        LREngineA.SetThrust(ThrustAmount);
    	    LREngineB.SetThrust(ThrustAmount);
        	RREngineA.SetThrust(ThrustAmount);
	        RREngineB.SetThrust(ThrustAmount);
		}

    if(VSize(Velocity) < float(1000))
    {
        if(bHoverThrustersOn == false){
            bHoverThrustersOn = true;
            HoverThrusters();
        }
    } else {
        if(bHoverThrustersOn == true){
            bHoverThrustersOn = false;
            HoverThrusters();
        }
    }

}




	function VehicleFire(bool bWasAltFire)
    {
    	if (bWasAltFire)
    	{
    	    if(NewAttachVehicle != none){
                EjectVehicle();
            }else{
                CheckForVehicleToAttach();
            }
        } else {
    		bWeaponIsFiring = True;
   		}
    }

simulated function CheckForVehicleToAttach(){
    local Vector TraceStart, TraceEnd, HitLocation, HitNormal;
    local Actor HitActor, HitActorB;
    local Vector TraceStartB, TraceEndB, HitLocationB, HitNormalB;

    TraceStart = Location + (DustOffset >> Rotation);
    TraceEnd = TraceStart - (DustTraceDistance * vect(0.0, 0.0, 1.0));
    HitActor = Trace(HitLocation, HitNormal, TraceEnd, TraceStart, true);
    TraceStartB = Location + (VehicleAttachOffset >> Rotation);
    TraceEndB = TraceStart - (VehicleAttachTraceDistance * vect(0.0, 0.0, 1.0));
    HitActorB = Trace(HitLocationB, HitNormalB, TraceEndB, TraceStartB, true);

    if((((HitActorB != none) && HitActorB.IsA('ONSVehicle')) && ONSVehicle(HitActorB).bCanFly == false) && NewAttachVehicle == none)
    {
        NewAttachVehicle = ONSVehicle(HitActorB);
        AttachVehicle();
    }
}



/* END Tick */




/* -- Vehicle Pickup/Put Down --- */



/* looks like failsafe cleanup code */

simulated event AttachVehicle()
{
    local Vector SpawnDistance;
    local Rotator YawRot;

    YawRot = Rotation;
    YawRot.Roll = 0;
    YawRot.Pitch = 0;
    SpawnDistance.Z = -1.0;
    NewAttachVehicle.SetPhysics(PHYS_None);
    NewAttachVehicle.SetCollision(false, false, false);
    AttachToBone(NewAttachVehicle, 'VehicleAttach_Bone');
    NewAttachVehicle.SetRelativeLocation(SpawnDistance);

    if(NewAttachVehicle.Team != Team)
    {
        NewAttachVehicle.Team = Team;
        NewAttachVehicle.TeamChanged();
    }

    if(TeamNum == 0)
    {
        MagEffect = Spawn(RedBuildEffectClass,,, Location, YawRot);
    } else {
        MagEffect = Spawn(BlueBuildEffectClass,,, Location, YawRot);
    }

    if(MagEffect != none)
    {
        AttachToBone(MagEffect, 'VehicleAttach_Bone');
    }

}

simulated event EjectVehicle()
{
    local class<actor> newClass;
    local actor newActor;
    local ONSVehicle newVehicle;

    local Vector newLocation;
    local Rotator newRotation;
    local float newHealth;

    if(NewAttachVehicle != none)
    {
        if(MagEffect != none){
            MagEffect.Destroy();
        }

        newClass = NewAttachVehicle.Class;

        newLocation = NewAttachVehicle.Location;
        newLocation.Z = newLocation.Z - 1.0;

        newRotation = NewAttachVehicle.Rotation;

        newHealth = NewAttachVehicle.Health;

        DetachFromBone(NewAttachVehicle);
        NewAttachVehicle.Destroy();
        NewAttachVehicle = none;


        newActor = Spawn(newClass,none,,newLocation,newRotation);

        newVehicle = ONSVehicle(newActor);

        newVehicle.Health = newHealth;

        if(newVehicle.Team != Team)
        {
            newVehicle.Team = Team;
            newVehicle.TeamChanged();
        }

    }

}

/* -- END Vehicle Pickup/Put Down --- */



/* Start Effects */



simulated function SetTrailFX()
{

    if((RightEngine == none) && Health > 0)
    {
        LeftEngine = Spawn(class'ONSAttackCraftExhaust', self);
        AttachToBone(LeftEngine, 'LEngineA');
        LeftEngineB = Spawn(class'ONSAttackCraftExhaust', self);
        AttachToBone(LeftEngineB, 'LEngineB');
        RightEngine = Spawn(class'ONSAttackCraftExhaust', self);
        AttachToBone(RightEngine, 'REngineA');
        RightEngineB = Spawn(class'ONSAttackCraftExhaust', self);
        AttachToBone(RightEngineB, 'REngineB');
        LeftEngine.SetRelativeRotation(rot(0, 32768, 0));
        LeftEngineB.SetRelativeRotation(rot(0, 32768, 0));
        RightEngine.SetRelativeRotation(rot(0, 32768, 0));
        RightEngineB.SetRelativeRotation(rot(0, 32768, 0));
        LREngineA = Spawn(class'ONSAttackCraftExhaust', self);
        AttachToBone(LREngineA, 'RearLEngineA');
        LREngineB = Spawn(class'ONSAttackCraftExhaust', self);
        AttachToBone(LREngineB, 'RearLEngineB');
        RREngineA = Spawn(class'ONSAttackCraftExhaust', self);
        AttachToBone(RREngineA, 'RearREngineA');
        RREngineB = Spawn(class'ONSAttackCraftExhaust', self);
        AttachToBone(RREngineB, 'RearREngineB');
        LREngineA.SetRelativeRotation(rot(0, 32768, 0));
        LREngineB.SetRelativeRotation(rot(0, 32768, 0));
        RREngineA.SetRelativeRotation(rot(0, 32768, 0));
        RREngineB.SetRelativeRotation(rot(0, 32768, 0));
        LSideEngineA = Spawn(class'ONSAttackCraftExhaust', self);
        AttachToBone(LSideEngineA, 'LEngineC');
        LSideEngineB = Spawn(class'ONSAttackCraftExhaust', self);
        AttachToBone(LSideEngineB, 'LEngineD');
        LSideEngineC = Spawn(class'ONSAttackCraftExhaust', self);
        AttachToBone(LSideEngineC, 'RearLEngineC');
        RSideEngineA = Spawn(class'ONSAttackCraftExhaust', self);
        AttachToBone(RSideEngineA, 'REngineC');
        RSideEngineB = Spawn(class'ONSAttackCraftExhaust', self);
        AttachToBone(RSideEngineB, 'REngineD');
        RSideEngineC = Spawn(class'ONSAttackCraftExhaust', self);
        AttachToBone(RSideEngineC, 'RearREngineC');
        LSideEngineA.SetRelativeRotation(rot(-16738, 0, 16738));
        LSideEngineB.SetRelativeRotation(rot(-16738, 0, 16738));
        LSideEngineC.SetRelativeRotation(rot(-16738, 0, 16738));
        RSideEngineA.SetRelativeRotation(rot(-16738, 0, 16738));
        RSideEngineB.SetRelativeRotation(rot(-16738, 0, 16738));
        RSideEngineC.SetRelativeRotation(rot(-16738, 0, 16738));
    }

}

simulated function UnSetTrailFX()
{

    if(LeftEngine != none)
    {
        LeftEngine.Destroy();
        LeftEngineB.Destroy();
        RightEngine.Destroy();
        RightEngineB.Destroy();
        LREngineA.Destroy();
        LREngineB.Destroy();
        RREngineA.Destroy();
        RREngineB.Destroy();
        LSideEngineA.Destroy();
        LSideEngineB.Destroy();
        LSideEngineC.Destroy();
        RSideEngineA.Destroy();
        RSideEngineB.Destroy();
        RSideEngineC.Destroy();
    }

}

simulated event HoverThrusters()
{
        if(RSideEngineA != none)
        {
            RSideEngineA.SetThrustEnabled(bHoverThrustersOn);
            RSideEngineA.SetThrust(1.0);

            RSideEngineB.SetThrustEnabled(bHoverThrustersOn);
            RSideEngineB.SetThrust(1.0);

            RSideEngineC.SetThrustEnabled(bHoverThrustersOn);
            RSideEngineC.SetThrust(1.0);

            LSideEngineA.SetThrustEnabled(bHoverThrustersOn);
            LSideEngineA.SetThrust(1.0);

            LSideEngineB.SetThrustEnabled(bHoverThrustersOn);
            LSideEngineB.SetThrust(1.0);

            LSideEngineC.SetThrustEnabled(bHoverThrustersOn);
            LSideEngineC.SetThrust(1.0);

        }
}

/* End Effects */

defaultproperties
{
     MaxPitchSpeed=10.000000
     DustOffset=(Z=10.000000)
     DustTraceDistance=600.000000
     VehicleAttachOffset=(X=-586.000000,Z=86.000000)
     VehicleAttachTraceDistance=286.000000
     RedBuildEffectClass=Class'Onslaught.ONSTankBuildEffectRed'
     BlueBuildEffectClass=Class'Onslaught.ONSTankBuildEffectBlue'
     UprightStiffness=10000.000000
     UprightDamping=300.000000
     MaxThrustForce=80.000000
     LongDamping=0.300000
     MaxStrafeForce=65.000000
     LatDamping=0.300000
     MaxRiseForce=200.000000
     UpDamping=0.050000
     TurnTorqueFactor=600.000000
     TurnTorqueMax=200.000000
     TurnDamping=50.000000
     MaxYawRate=1.500000
     PitchTorqueFactor=200.000000
     PitchTorqueMax=35.000000
     PitchDamping=20.000000
     RollTorqueTurnFactor=750.000000
     RollTorqueStrafeFactor=100.000000
     RollTorqueMax=100.000000
     RollDamping=30.000000
     StopThreshold=100.000000
     MaxRandForce=3.000000
     RandForceInterval=0.750000
     PushForce=200000.000000
     PassengerWeapons(0)=(WeaponPawnClass=Class'W_Dragon.WeaponDragonGunPawn',WeaponBone="LWLight")
     PassengerWeapons(1)=(WeaponPawnClass=Class'W_Dragon.WeaponDragonGunPawn',WeaponBone="RWLight")
     PassengerWeapons(2)=(WeaponPawnClass=Class'W_Dragon.WeaponDragonCannonPawn',WeaponBone="LRLight")
     PassengerWeapons(3)=(WeaponPawnClass=Class'W_Dragon.WeaponDragonCannonPawn',WeaponBone="RRLight")
     IdleSound=Sound'ONSVehicleSounds-S.AttackCraft.AttackCraftIdle'
     StartUpSound=Sound'ONSVehicleSounds-S.AttackCraft.AttackCraftStartUp'
     ShutDownSound=Sound'ONSVehicleSounds-S.AttackCraft.AttackCraftShutDown'
     StartUpForce="AttackCraftStartUp"
     ShutDownForce="AttackCraftShutDown"
     DestroyedVehicleMesh=StaticMesh'W_Dragon-ST.DropShip_ST.DropshipDestroyed'
     DestructionEffectClass=Class'Onslaught.ONSVehicleExplosionEffect'
     DisintegrationEffectClass=Class'Onslaught.ONSVehDeathAttackCraft'
     DestructionLinearMomentum=(Min=250000.000000,Max=400000.000000)
     DestructionAngularMomentum=(Min=100.000000,Max=300.000000)
     DamagedEffectScale=1.500000
     DamagedEffectOffset=(X=100.000000,Y=20.000000,Z=26.000000)
     VehicleMass=7.000000
     bTurnInPlace=True
     bDriverHoldsFlag=False
     ExitPositions(0)=(Y=-365.000000,Z=200.000000)
     ExitPositions(1)=(Y=365.000000,Z=200.000000)
     ExitPositions(2)=(Y=-365.000000,Z=-100.000000)
     ExitPositions(3)=(Y=365.000000,Z=-100.000000)
     EntryPosition=(Z=-20.000000)
     EntryRadius=350.000000
     TPCamDistance=500.000000
     TPCamLookat=(X=0.000000,Z=0.000000)
     TPCamWorldOffset=(Z=200.000000)
     DriverDamageMult=0.000000
     VehiclePositionString="in a DropShip"
     VehicleNameString="DropShip"
     RanOverDamageType=Class'Onslaught.DamTypeAttackCraftRoadkill'
     CrushedDamageType=Class'Onslaught.DamTypeAttackCraftPancake'
     MaxDesireability=0.600000
     FlagBone="Main"
     FlagOffset=(Z=80.000000)
     FlagRotation=(Yaw=32768)
     bCanBeBaseForPawns=True
     GroundSpeed=500.000000
     HealthMax=2000.000000
     Health=2000
     Mesh=SkeletalMesh'W_Dragon-AN.UTDropShip'
     SoundVolume=160
     CollisionRadius=240.000000
     CollisionHeight=100.000000
     Begin Object Class=KarmaParamsRBFull Name=KParams0
         KInertiaTensor(0)=1.000000
         KInertiaTensor(3)=3.000000
         KInertiaTensor(5)=3.500000
         KCOMOffset=(X=-0.250000)
         KLinearDamping=0.000000
         KAngularDamping=0.000000
         KStartEnabled=True
         bKNonSphericalInertia=True
         KActorGravScale=0.000000
         bHighDetailOnly=False
         bClientOnly=False
         bKDoubleTickRate=True
         bKStayUpright=True
         bKAllowRotate=True
         bDestroyOnWorldPenetrate=True
         bDoSafetime=True
         KFriction=0.500000
         KImpactThreshold=300.000000
     End Object
     KParams=KarmaParamsRBFull'W_Dragon.Dragon.KParams0'

}

/*******************************************************************************
 * VortexShell generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class QuantumShell extends Projectile;

var(VortexSounds) array<Sound> ImpactSounds;

simulated function PostBeginPlay()
{
    RandSpin(100000.0);
}

simulated function HitWall(Vector HitNormal, Actor Wall)
{
    Velocity -= (((Velocity Dot HitNormal) * HitNormal) * RandRange(1.70, 1.90));
    Velocity *= RandRange(0.50, 0.70);
    RandSpin(100000.0);

    if(VSize(Velocity) > float(80))
    {
        PlaySound(ImpactSounds[Rand(ImpactSounds.Length)], SLOT_Misc);
    } else {
        if(VSize(Velocity) < float(10))
        {
            SetPhysics(PHYS_None);
        }
    }
}

singular simulated function Touch(Actor Other)
{
    local Actor HitActor;
    local Vector HitLocation, HitNormal, VelDir;
    local bool bBeyondOther;
    local float BackDist, DirZ;

    if(Other == none)
    {
        return;
    }

    if(Other.bProjTarget || Other.bBlockActors && Other.bBlockPlayers)
    {
        if(Velocity == vect(0.0, 0.0, 0.0))
        {
            return;
        }
        bBeyondOther = (Velocity Dot (Location - Other.Location)) > float(0);
        VelDir = Normal(Velocity);
        DirZ = Sqrt(Abs(VelDir.Z));
        BackDist = (Other.CollisionRadius * (float(1) - DirZ)) + (Other.CollisionHeight * DirZ);

        if(bBeyondOther)
        {
            BackDist += VSize(Location - Other.Location);
        } else {
            BackDist -= VSize(Location - Other.Location);
        }

        HitActor = Trace(HitLocation, HitNormal, Location, Location - ((1.10 * BackDist) * VelDir), true);
        HitWall(HitNormal, HitActor);
    }
}

defaultproperties
{
    ImpactSounds(0)=Sound'QuantumSounds.Vortex.vortexshellbounce1'
    ImpactSounds(1)=Sound'QuantumSounds.Vortex.vortexshellbounce2'
    ImpactSounds(2)=Sound'QuantumSounds.Vortex.vortexshellbounce3'
    Physics=PHYS_Falling
    RemoteRole=0
    LifeSpan=30.0
    Mesh=SkeletalMesh'Quantum-Ani2.Chaos_VXspherehf'
    DrawScale=1.20
    AmbientGlow=80
    CollisionRadius=2.0
    CollisionHeight=2.0
    bBounce=true
    bFixedRotationDir=true
    DesiredRotation=(Pitch=12000,Yaw=5666,Roll=2334)
}

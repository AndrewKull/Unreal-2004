/*******************************************************************************
 * Quantum generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2013 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class QuantumGun extends Weapon
    dependson(QuantumChargedFire)
    dependson(QuantumDummyProj)
    config(User);

//var QuantumWatcher QuantumWatcher;
var QuantumDummyProj DummyProj;

simulated function ShowDummyProj()
{
    if(DummyProj != none)
    {
        DummyProj.bHidden = false;
    }

}

simulated function HideDummyProj()
{

    if(DummyProj != none)
    {
        DummyProj.bHidden = true;
    }

}

simulated function ClientWeaponThrown()
{
    HideDummyProj();
    super.ClientWeaponThrown();
}

simulated function Destroyed()
{
    if(DummyProj != none)
    {
        DummyProj.Destroy();
    }
    super.Destroyed();
}

simulated function AnimEnd(int Channel)
{
    local name Anim;
    local float frame, Rate;

    GetAnimParams(0, Anim, frame, Rate);
    if(FireMode[1].bIsFiring)
    {
    /*    TODO what is this?
        UnresolvedNativeFunction_97('HOLD', 1.0, 0.10);
        */
    }
    else
    {
        super.AnimEnd(Channel);
    }
}

simulated function PlayIdle()
{
    super.PlayIdle();
    if((Ammo[0] != none) && Ammo[0].AmmoAmount > 0)
    {
        ShowDummyProj();
    }
}

simulated function OutOfAmmo()
{
    if((Level.NetMode == NM_Standalone) && !Instigator.IsLocallyControlled())
    {
        return;
    }
    if(FireMode[0].bIsFiring || FireMode[1].bIsFiring)
    {
        return;
    }
    super.OutOfAmmo();
}

simulated function float ChargeBar()
{

    return FMin(1.0, FireMode[1].HoldTime / QuantumChargedFire(FireMode[1]).MaxChargeTime);

}

simulated function BringUp(optional Weapon PrevWeapon)
{
    /*    TODO what is this?

//    AmbientSound = sound'Quantum_holdambient';
*/
    super.BringUp();
    //return;
}

simulated function bool PutDown()
{
    AmbientSound = none;
    return super.PutDown();
}

simulated function Weapon NextWeapon(Weapon CurrentChoice, Weapon CurrentWeapon)
{

    if(HasAmmo())
    {
        if(CurrentChoice == none)
        {
            if(CurrentWeapon != self)
            {
                CurrentChoice = self;
            }
        }else{
            if((InventoryGroup == CurrentWeapon.InventoryGroup) && InventoryGroup == CurrentChoice.InventoryGroup)
            {
                if((((GroupOffset < CurrentChoice.GroupOffset) && CurrentChoice.GroupOffset < CurrentWeapon.GroupOffset) || (CurrentWeapon.GroupOffset < GroupOffset) && GroupOffset < CurrentChoice.GroupOffset) || (CurrentChoice.GroupOffset < CurrentWeapon.GroupOffset) && CurrentWeapon.GroupOffset < GroupOffset)
                {
                    CurrentChoice = self;
                }
            }else{
                if(((((((CurrentWeapon.InventoryGroup == InventoryGroup) && CurrentWeapon.GroupOffset < GroupOffset) || (CurrentWeapon.InventoryGroup == CurrentChoice.InventoryGroup) && CurrentChoice.GroupOffset < CurrentWeapon.GroupOffset) || (CurrentChoice.InventoryGroup == InventoryGroup) && GroupOffset < CurrentChoice.GroupOffset) || (InventoryGroup < CurrentChoice.InventoryGroup) && CurrentChoice.InventoryGroup < CurrentWeapon.InventoryGroup) || (CurrentWeapon.InventoryGroup < InventoryGroup) && InventoryGroup < CurrentChoice.InventoryGroup) || (CurrentChoice.InventoryGroup < CurrentWeapon.InventoryGroup) && CurrentWeapon.InventoryGroup < InventoryGroup)
                {
                    CurrentChoice = self;
                }
            }
        }
    }

    if(Inventory == none)
    {
        return CurrentChoice;
    } else {
        return Inventory.NextWeapon(CurrentChoice, CurrentWeapon);
    }
}

simulated function Weapon PrevWeapon(Weapon CurrentChoice, Weapon CurrentWeapon)
{
    if(HasAmmo())
    {
        if(CurrentChoice == none)
        {
            if(CurrentWeapon != self)
            {
                CurrentChoice = self;
            }
        }else{
            if((InventoryGroup == CurrentWeapon.InventoryGroup) && InventoryGroup == CurrentChoice.InventoryGroup)
            {
                if((((GroupOffset > CurrentChoice.GroupOffset) && CurrentChoice.GroupOffset > CurrentWeapon.GroupOffset) || (CurrentWeapon.GroupOffset > GroupOffset) && GroupOffset > CurrentChoice.GroupOffset) || (CurrentChoice.GroupOffset > CurrentWeapon.GroupOffset) && CurrentWeapon.GroupOffset > GroupOffset)
                {
                    CurrentChoice = self;
                }
            }else{
                if(((((((CurrentWeapon.InventoryGroup == InventoryGroup) && CurrentWeapon.GroupOffset > GroupOffset) || (CurrentWeapon.InventoryGroup == CurrentChoice.InventoryGroup) && CurrentChoice.GroupOffset > CurrentWeapon.GroupOffset) || (CurrentChoice.InventoryGroup == InventoryGroup) && GroupOffset > CurrentChoice.GroupOffset) || (InventoryGroup > CurrentChoice.InventoryGroup) && CurrentChoice.InventoryGroup > CurrentWeapon.InventoryGroup) || (CurrentWeapon.InventoryGroup > InventoryGroup) && InventoryGroup > CurrentChoice.InventoryGroup) || (CurrentChoice.InventoryGroup > CurrentWeapon.InventoryGroup) && CurrentWeapon.InventoryGroup > InventoryGroup)
                {
                    CurrentChoice = self;
                }
            }
        }
    }

    if(Inventory == none)
    {
        return CurrentChoice;
    }else{
        return Inventory.PrevWeapon(CurrentChoice, CurrentWeapon);
    }
}

defaultproperties
{
    FireModeClass[0]=class'QuantumFire'
    FireModeClass[1]=class'QuantumChargedFire'
    SelectAnim=Pickup
    PutDownAnim=PutDown
    IdleAnimRate=0.10
    SelectAnimRate=1.0
    PutDownAnimRate=1.0
     SelectSound=Sound'WeaponSounds.Misc.redeemer_change'
    SelectForce="SwitchToFlakCannon"
    AIRating=0.550
    CurrentRating=0.550
    bShowChargingBar=true
    bNoAmmoInstances=false
    EffectOffset=(X=100.0,Y=32.0,Z=-20.0)
    DisplayFOV=60.0
    SmallViewOffset=(X=0.0,Y=12.0,Z=-26.0)
    CenteredOffsetY=-20.0
//    CustomCrosshair=3
//    CustomCrossHairColor=(R=255,G=255,B=128,A=255)
//    CustomCrossHairTextureName="ChaosTex_006.XHairs.Quantum"
    InventoryGroup=0
    GroupOffset=64
    PickupClass=class'QuantumPickup'
    PlayerViewOffset=(X=-24.0,Y=-2.0,Z=-16.0)
    PlayerViewPivot=(Pitch=0,Yaw=-16383,Roll=0)
    BobDamping=2.20
    AttachmentClass=class'QuantumAttachment'
//    IconMaterial=Texture'ChaosInterface.Icons.Quantum'
//    IconCoords=(X1=20,Y1=48,X2=107,Y2=77)
    ItemName="Quantum Gun"
    Mesh=SkeletalMesh'W_Vortex-Ani.chaos_Vortexlauncher_1st'
    UV2Texture=Shader'XGameShaders.WeaponShaders.WeaponEnvShader'
}
